defaults:
  - model: ctc_model
  - writer: cometml
  - metrics: example
  - datasets: example
  - dataloader: dataloader
  - transforms: transforms
  - _self_
optimizer:
  _target_: torch.optim.AdamW
  lr: 3e-4
  betas: [0.9, 0.98]
  eps: 1e-9
  weight_decay: 1e-6
lr_scheduler:
  _target_: torch.optim.lr_scheduler.OneCycleLR
  max_lr: 1e-3
  epochs: ${trainer.n_epochs}
  steps_per_epoch: ${trainer.epoch_len}
  pct_start: 0.2
  div_factor: 25
  final_div_factor: 5000
  anneal_strategy: cos
loss_function:
  _target_: src.loss.CTCLossWrapper
text_encoder:
  _target_: src.text_encoder.CTCTextEncoder
  nbest: 4
  beam_size: 4
trainer:
  log_step: 500
  n_epochs: 50
  epoch_len: 2000
  device_tensors: ["spectrogram", "text_encoded"] # which tensors should be on device (ex. GPU)
  resume_from: null # null or path to the checkpoint dir with *.pth and config.yaml
  device: auto # device name or "auto"
  override: False # if True, will override the previous run with the same name
  monitor: "min val_WER_(Argmax)" # "off" or "max/min metric_name", i.e. our goal is to maximize/minimize metric
  save_period: 5 # checkpoint each save_period epochs in addition to the best epoch
  early_stop: ${trainer.n_epochs} # epochs for early stopping
  save_dir: "saved"
  seed: 42
  max_grad_norm: 1.0
